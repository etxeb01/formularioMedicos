
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Etxeb
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    ArrayList<Medico> medicos = new ArrayList();
    
    private final String dataBase = "hospital";
    private final String user = "root";
    private final String password = "1234";
    private final String URL = "jdbc:mysql://localhost:3306/"+dataBase+"?autoReconnect=true&useSSL=false";
    
    private Connection con = null;
    
    String registro;
    
    public NewJFrame() {
        initComponents();
        cargarTabla();
        setLocationRelativeTo(null); // Centrar Ventana
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoApellido = new javax.swing.JTextField();
        campoEspecialidad = new javax.swing.JTextField();
        campoNombre = new javax.swing.JTextField();
        campoRegistro = new javax.swing.JTextField();
        botonAgregar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonBuscar = new javax.swing.JButton();
        botonLimpiar = new javax.swing.JButton();
        botonActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMedicos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Formulario Registro Medicos"));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel1.setText("Apellido");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setText("Especialidad");

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel3.setText("NÂ° Registro");

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel4.setText("Nombre");

        campoApellido.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        campoEspecialidad.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        campoNombre.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        campoNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNombreActionPerformed(evt);
            }
        });

        campoRegistro.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        campoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoRegistroActionPerformed(evt);
            }
        });

        botonAgregar.setText("Agregar");
        botonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonBuscar.setText("Buscar");

        botonLimpiar.setText("Limpiar");
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });

        botonActualizar.setText("Actualizar");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(126, 126, 126))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(botonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(campoEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAgregar)
                    .addComponent(botonEliminar)
                    .addComponent(botonBuscar)
                    .addComponent(botonLimpiar)
                    .addComponent(botonActualizar))
                .addContainerGap())
        );

        tablaMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registro", "Nombre", "Apellido", "Especialidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMedicos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNombreActionPerformed

    private void campoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoRegistroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoRegistroActionPerformed

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed

              limpiar();  
    }//GEN-LAST:event_botonLimpiarActionPerformed

    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed

        Connection conexion = null;
        PreparedStatement ps;
        
        try{
            
            conexion = getConexion();
            ps = (PreparedStatement) conexion.prepareStatement("INSERT INTO medicos VALUES (?,?,?,?)");
            ps.setString(1, campoRegistro.getText());
            ps.setString(2, campoNombre.getText());
            ps.setString(3, campoApellido.getText());
            ps.setString(4, campoEspecialidad.getText());
            
            int result = ps.executeUpdate();
            
            if(result>0){
                JOptionPane.showMessageDialog(null, "Registro insertado correctamente");
                cargarTabla();
                limpiar();
            }
            
            else{
                JOptionPane.showMessageDialog(null, "Registro no insertado");  
            }
            
            conexion.close();
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error "+ex);
        }
        
    }//GEN-LAST:event_botonAgregarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
       
        Connection conexion = null;
        PreparedStatement ps;
        
        try{
            
            conexion = getConexion();
            ps = (PreparedStatement) conexion.prepareStatement("DELETE FROM medicos WHERE NumRegistro=?");
            ps.setString(1, JOptionPane.showInputDialog("Ingrese el numero de registro a eliminar"));
            
            
            int result = ps.executeUpdate();
            
            if(result>0){
                JOptionPane.showMessageDialog(null, "Registro eliminado de manera exitosa");
                limpiar();
            }
            
            else{
                JOptionPane.showMessageDialog(null, "Registro no eliminado");  
            }
            
            conexion.close();
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error "+ex);
        }
        
        
        
        
        
//        int nRegistro, indice=-1;
//        nRegistro = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese el registro del medico a eliminar "));
//        
//        for (int i = 0; i < medicos.size(); i++) {
//            
//            if(medicos.get(i).getNumeroRegistro()== nRegistro){
//                indice = i;
//            }
//            
//        }
//        
//        if( indice !=-1){
//            JOptionPane.showMessageDialog(null, medicos.get(indice).toString()+" \n Eliminado");
//            System.out.println(indice);
//            medicos.remove(indice);
//            
//        }
//        else{
//            JOptionPane.showMessageDialog(null, "Registro no encontrado");
//        }
//        
//        cargarDatosTabla();
    }//GEN-LAST:event_botonEliminarActionPerformed

    
      
    
    public void cargarTabla(){
        
        DefaultTableModel modeloTabla = new DefaultTableModel();
        tablaMedicos.setModel(modeloTabla);
        
        modeloTabla.addColumn("Registro");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Apellido");
        modeloTabla.addColumn("Especialidad");
        
        
        
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        
        try{
            Connection con = getConexion();
            
            ps = (PreparedStatement) con.prepareStatement("SELECT* FROM Medicos");
            rs = ps.executeQuery();
            
            while(rs.next()){
                
                Object fila[] = new Object[4];
                for (int i = 0; i <4; i++) {
                  fila[i]=rs.getObject(i+1);
                }
                modeloTabla.addRow(fila);
            }
            
        }
        catch(SQLException e){
            System.err.println("Error "+e);
        }
        
        
        
    }
    
    
    
    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
           
           
           ResultSet rs = null;
           Connection conexion = getConexion();
           
            try {
                PreparedStatement ps = (PreparedStatement) conexion.prepareStatement("UPDATE Medicos set numRegistro=?, Nombre=?,Apellido=?, Especialidad =? Where NumRegistro ="+registro);
                ps.setString(1,campoRegistro.getText());
                ps.setString(2, campoNombre.getText());
                ps.setString(3, campoApellido.getText());
                ps.setString(4, campoEspecialidad.getText());
                
                
                int result = ps.executeUpdate();
                
                if(result>0){
                    JOptionPane.showMessageDialog(null, "Registro modificado de manera exitosa");
                    cargarTabla();
                    limpiar();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Registro no modificado");
                }
            
            } catch (SQLException ex) {
                
                JOptionPane.showMessageDialog(null,"Error "+ex);
            }
               
       
        
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void tablaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMedicosMouseClicked
        ResultSet rs = null;

        if (tablaMedicos.getSelectedRow() >= 0) {

            registro = String.valueOf(tablaMedicos.getModel().getValueAt(tablaMedicos.getSelectedRow(), 0));

            Connection conexion = getConexion();
            try {
                PreparedStatement ps = (PreparedStatement) conexion.prepareStatement("SELECT* from Medicos Where NumRegistro=" + registro);
                rs = ps.executeQuery();

                if (rs.next()) {
                    campoNombre.setText(rs.getString("Nombre"));
                    campoApellido.setText(rs.getString("Apellido"));
                    campoEspecialidad.setText(rs.getString("Especialidad"));
                    campoRegistro.setText(rs.getString("NumRegistro"));
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un registro de la tabla");

        }
       
    }//GEN-LAST:event_tablaMedicosMouseClicked

    public void cargarDatosTabla(){
        
        String array[][] = null;

        if (medicos.size() >= 1) {
            array = new String[medicos.size()][4];
            for (int i = 0; i < medicos.size(); i++) {

                array[i][0] = medicos.get(i).getNombre();
                array[i][1] = medicos.get(i).getApellido();
                array[i][2] = medicos.get(i).getEspecialidad();
                array[i][3] = String.valueOf(medicos.get(i).getNumeroRegistro());

                tablaMedicos.setModel(new javax.swing.table.DefaultTableModel(
                        array,
                        new String[]{
                            "Nombre", "Apellido", "Especialidad", "Registro"
                        }
                ));

            }

        } else {
            tablaMedicos.setModel(new javax.swing.table.DefaultTableModel(
                    array,
                    new String[]{
                        "Nombre", "Apellido", "Especialidad", "Registro"
                    }
            ));
        }

    }
    
    public void limpiar(){
        campoNombre.setText("");
        campoApellido.setText("");
        campoEspecialidad.setText("");
        campoRegistro.setText("");
    }
    
    
    public Connection getConexion(){
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection(URL,user,password);
            
            // JOptionPane.showMessageDialog(null, "conexion exitosa");
        } catch (Exception ex) {
        
        JOptionPane.showMessageDialog(null,"Error "+ex);
        
        }
        
        
        
        return con;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonAgregar;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JTextField campoApellido;
    private javax.swing.JTextField campoEspecialidad;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JTextField campoRegistro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaMedicos;
    // End of variables declaration//GEN-END:variables
}
